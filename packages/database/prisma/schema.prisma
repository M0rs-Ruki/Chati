generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  role      Role       @default(EDITOR)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[]
  media     Media[]
  auditLogs AuditLog[]
}

// ============================================
// THEME & NAVIGATION
// ============================================

model Theme {
  id             String   @id @default(cuid())
  name           String   @unique
  primaryColor   String
  secondaryColor String
  accentColor    String?
  logoUrl        String?
  faviconUrl     String?
  typography     String?
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  pages Page[]
}

model Navigation {
  id        String   @id @default(cuid())
  key       String   @unique // "header" or "footer"
  items     Json     // Array of nav items
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// MEDIA
// ============================================

model Media {
  id          String   @id @default(cuid())
  url         String
  alt         String
  width       Int?
  height      Int?
  contentType String?
  size        Int?
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())

  // Relations
  blogPosts BlogPost[]
}

// ============================================
// BLOG SYSTEM
// ============================================

enum PublishStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  title       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  blogPosts BlogPost[]
}

model Tag {
  id        String     @id @default(cuid())
  slug      String     @unique
  title     String
  createdAt DateTime   @default(now())

  // Relations
  blogPosts BlogPost[]
}

model BlogPost {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  excerpt     String?
  content     Json          // Rich text or sections
  coverId     String?
  cover       Media?        @relation(fields: [coverId], references: [id], onDelete: SetNull)
  categoryId  String?
  category    Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags        Tag[]
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    String?
  author      User?         @relation(fields: [authorId], references: [id], onDelete: SetNull)
  seoId       String?       @unique
  seo         SeoMeta?      @relation(fields: [seoId], references: [id], onDelete: SetNull)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ============================================
// PAGES & SECTIONS
// ============================================

enum LayoutType {
  STANDARD
  FULL_WIDTH
  LANDING
}

model Page {
  id          String        @id @default(cuid())
  slug        String        @unique
  title       String
  description String?
  themeId     String?
  theme       Theme?        @relation(fields: [themeId], references: [id], onDelete: SetNull)
  layout      LayoutType    @default(STANDARD)
  sections    Section[]
  status      PublishStatus @default(DRAFT)
  publishedAt DateTime?
  seoId       String?       @unique
  seo         SeoMeta?      @relation(fields: [seoId], references: [id], onDelete: SetNull)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum SectionKind {
  HERO
  FEATURES
  LOGOS
  VALUE_GRID
  INDUSTRY_TABS
  TESTIMONIALS
  PRICING
  FAQ
  CTA
  RICH_TEXT
  MEDIA_GALLERY
  CONTACT_FORM
  CUSTOM
}

model Section {
  id        String      @id @default(cuid())
  pageId    String
  page      Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  kind      SectionKind
  order     Int
  data      Json        // Section-specific data
  visible   Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([pageId, order])
}

// ============================================
// SEO
// ============================================

model SeoMeta {
  id          String    @id @default(cuid())
  title       String
  description String
  canonical   String?
  ogImage     String?
  ogType      String?
  noindex     Boolean   @default(false)
  jsonLd      Json?

  // Relations
  page     Page?
  blogPost BlogPost?
}

// ============================================
// REDIRECTS & FORMS
// ============================================

model Redirect {
  id        String   @id @default(cuid())
  fromPath  String   @unique
  toPath    String
  permanent Boolean  @default(true)
  createdAt DateTime @default(now())
}

model FormSubmission {
  id        String   @id @default(cuid())
  formKey   String   // "contact", "demo", etc.
  data      Json
  status    String   @default("new")
  source    String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([formKey, createdAt])
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id], onDelete: SetNull)
  entity    String   // "Page", "BlogPost", etc.
  entityId  String
  action    String   // "create", "update", "delete", "publish"
  before    Json?    // Previous state
  after     Json?    // New state
  createdAt DateTime @default(now())

  @@index([entity, entityId])
  @@index([actorId, createdAt])
}
